import { NextResponse } from 'next/server';
import { LogSource, LogCategory, LogSeverity, AnalyzedLog } from '@/lib/types';
import { logsStore } from '@/lib/cache';

const demoLogs: AnalyzedLog[] = [
  // Kubernetes errors
  {
    id: '1',
    source: LogSource.KUBERNETES,
    timestamp: new Date(Date.now() - 3600000),
    message: 'Pod my-app-5d7f8b failed to pull image: ImagePullBackOff',
    rawData: 'Pod my-app-5d7f8b failed to pull image: ImagePullBackOff',
    category: LogCategory.NETWORK,
    severity: LogSeverity.ERROR,
    errorType: 'ImagePullBackOff',
    suggestedFix: 'Check if the image exists in the registry and verify image pull credentials',
    tags: ['kubernetes', 'pod', 'image'],
  },
  {
    id: '2',
    source: LogSource.KUBERNETES,
    timestamp: new Date(Date.now() - 3000000),
    message: 'OOMKilled - Container exceeded memory limit (2Gi)',
    rawData: 'OOMKilled - Container exceeded memory limit (2Gi)',
    category: LogCategory.RESOURCE,
    severity: LogSeverity.CRITICAL,
    errorType: 'OOMKilled',
    suggestedFix: 'Increase memory limits in pod specification or optimize application memory usage',
    tags: ['kubernetes', 'oom', 'memory'],
  },
  {
    id: '3',
    source: LogSource.KUBERNETES,
    timestamp: new Date(Date.now() - 2400000),
    message: 'Back-off restarting failed container my-service in pod default/my-service-xyz',
    rawData: 'Back-off restarting failed container',
    category: LogCategory.APPLICATION,
    severity: LogSeverity.WARNING,
    errorType: 'CrashLoopBackOff',
    suggestedFix: 'Check application logs for startup errors and verify configuration',
    tags: ['kubernetes', 'crash', 'restart'],
  },
  {
    id: '4',
    source: LogSource.KUBERNETES,
    timestamp: new Date(Date.now() - 1800000),
    message: 'Failed to attach volume pvc-123: timed out waiting for volume',
    rawData: 'Failed to attach volume pvc-123',
    category: LogCategory.RESOURCE,
    severity: LogSeverity.ERROR,
    errorType: 'VolumeAttachError',
    suggestedFix: 'Check storage class availability and PVC bindings',
    tags: ['kubernetes', 'volume', 'storage'],
  },

  // Docker errors
  {
    id: '5',
    source: LogSource.DOCKER,
    timestamp: new Date(Date.now() - 7200000),
    message: 'Cannot connect to the Docker daemon at unix:///var/run/docker.sock',
    rawData: 'Cannot connect to the Docker daemon',
    category: LogCategory.PERMISSIONS,
    severity: LogSeverity.CRITICAL,
    errorType: 'DaemonConnectionError',
    suggestedFix: 'Ensure Docker daemon is running and user has permissions to access socket',
    tags: ['docker', 'daemon', 'connection'],
  },
  {
    id: '6',
    source: LogSource.DOCKER,
    timestamp: new Date(Date.now() - 5400000),
    message: 'No space left on device',
    rawData: 'No space left on device',
    category: LogCategory.RESOURCE,
    severity: LogSeverity.CRITICAL,
    errorType: 'DiskSpaceError',
    suggestedFix: 'Clean up unused images and containers: docker system prune -a',
    tags: ['docker', 'disk', 'storage'],
  },
  {
    id: '7',
    source: LogSource.DOCKER,
    timestamp: new Date(Date.now() - 4800000),
    message: 'Failed to create shim: context deadline exceeded',
    rawData: 'Failed to create shim',
    category: LogCategory.PERFORMANCE,
    severity: LogSeverity.ERROR,
    errorType: 'ShimCreationTimeout',
    suggestedFix: 'Check system resources and Docker daemon performance',
    tags: ['docker', 'timeout', 'performance'],
  },
  {
    id: '8',
    source: LogSource.DOCKER,
    timestamp: new Date(Date.now() - 4200000),
    message: 'Your kernel does not support swap limit capabilities',
    rawData: 'kernel does not support swap limit',
    category: LogCategory.CONFIG,
    severity: LogSeverity.WARNING,
    errorType: 'KernelCapabilityWarning',
    suggestedFix: 'Update kernel configuration or disable swap limit in Docker daemon config',
    tags: ['docker', 'kernel', 'config'],
  },

  // Jenkins errors
  {
    id: '9',
    source: LogSource.JENKINS,
    timestamp: new Date(Date.now() - 9000000),
    message: 'Build step failed with exception: java.io.IOException: Remote call failed',
    rawData: 'Build step failed with exception',
    category: LogCategory.NETWORK,
    severity: LogSeverity.ERROR,
    errorType: 'RemoteCallFailure',
    suggestedFix: 'Check network connectivity between Jenkins master and agents',
    tags: ['jenkins', 'build', 'network'],
  },
  {
    id: '10',
    source: LogSource.JENKINS,
    timestamp: new Date(Date.now() - 6600000),
    message: 'Unable to find Git installation',
    rawData: 'Unable to find Git installation',
    category: LogCategory.CONFIG,
    severity: LogSeverity.ERROR,
    errorType: 'GitNotFound',
    suggestedFix: 'Install Git on the Jenkins agent or configure Git tool in Jenkins',
    tags: ['jenkins', 'git', 'configuration'],
  },
  {
    id: '11',
    source: LogSource.JENKINS,
    timestamp: new Date(Date.now() - 5000000),
    message: 'No credentials found for SCM checkout',
    rawData: 'No credentials found',
    category: LogCategory.SECURITY,
    severity: LogSeverity.WARNING,
    errorType: 'MissingCredentials',
    suggestedFix: 'Add credentials to Jenkins credential store and reference in job configuration',
    tags: ['jenkins', 'credentials', 'security'],
  },
  {
    id: '12',
    source: LogSource.JENKINS,
    timestamp: new Date(Date.now() - 3200000),
    message: 'Test failures: 5 tests failed, 45 passed',
    rawData: 'Test failures: 5 tests failed',
    category: LogCategory.APPLICATION,
    severity: LogSeverity.WARNING,
    errorType: 'TestFailures',
    suggestedFix: 'Review failed tests and fix underlying issues',
    tags: ['jenkins', 'tests', 'failure'],
  },

  // EC2 errors
  {
    id: '13',
    source: LogSource.EC2,
    timestamp: new Date(Date.now() - 10800000),
    message: 'Instance i-1234567890abcdef0 failed status checks',
    rawData: 'Instance failed status checks',
    category: LogCategory.RESOURCE,
    severity: LogSeverity.CRITICAL,
    errorType: 'StatusCheckFailed',
    suggestedFix: 'Reboot instance or check instance system log for hardware/network issues',
    tags: ['ec2', 'instance', 'health'],
  },
  {
    id: '14',
    source: LogSource.EC2,
    timestamp: new Date(Date.now() - 8400000),
    message: 'Insufficient capacity to launch instance',
    rawData: 'Insufficient capacity',
    category: LogCategory.RESOURCE,
    severity: LogSeverity.ERROR,
    errorType: 'InsufficientCapacity',
    suggestedFix: 'Try different availability zone or instance type',
    tags: ['ec2', 'capacity', 'launch'],
  },
  {
    id: '15',
    source: LogSource.EC2,
    timestamp: new Date(Date.now() - 7000000),
    message: 'High CPU utilization (95%) on instance i-abcdef1234567890',
    rawData: 'High CPU utilization (95%)',
    category: LogCategory.PERFORMANCE,
    severity: LogSeverity.WARNING,
    errorType: 'HighCPUUtilization',
    suggestedFix: 'Scale up instance type or add auto-scaling policies',
    tags: ['ec2', 'cpu', 'performance'],
  },
  {
    id: '16',
    source: LogSource.EC2,
    timestamp: new Date(Date.now() - 6000000),
    message: 'Failed to attach network interface to instance',
    rawData: 'Failed to attach network interface',
    category: LogCategory.NETWORK,
    severity: LogSeverity.ERROR,
    errorType: 'NetworkInterfaceError',
    suggestedFix: 'Check security group rules and subnet configuration',
    tags: ['ec2', 'network', 'interface'],
  },
  {
    id: '17',
    source: LogSource.EC2,
    timestamp: new Date(Date.now() - 4500000),
    message: 'Volume vol-123456 failed to attach: InvalidVolume.NotFound',
    rawData: 'Volume failed to attach',
    category: LogCategory.RESOURCE,
    severity: LogSeverity.ERROR,
    errorType: 'VolumeNotFound',
    suggestedFix: 'Verify volume exists in the same availability zone as instance',
    tags: ['ec2', 'ebs', 'volume'],
  },

  // Additional variety
  {
    id: '18',
    source: LogSource.KUBERNETES,
    timestamp: new Date(Date.now() - 1200000),
    message: 'Liveness probe failed: HTTP probe failed with statuscode: 503',
    rawData: 'Liveness probe failed',
    category: LogCategory.APPLICATION,
    severity: LogSeverity.ERROR,
    errorType: 'LivenessProbeFailed',
    suggestedFix: 'Check application health endpoint and ensure it returns 200 status',
    tags: ['kubernetes', 'probe', 'health'],
  },
  {
    id: '19',
    source: LogSource.DOCKER,
    timestamp: new Date(Date.now() - 2000000),
    message: 'Error response from daemon: conflict: unable to remove repository reference',
    rawData: 'conflict: unable to remove repository reference',
    category: LogCategory.APPLICATION,
    severity: LogSeverity.ERROR,
    errorType: 'ImageRemoveConflict',
    suggestedFix: 'Stop containers using this image before removing it',
    tags: ['docker', 'image', 'conflict'],
  },
  {
    id: '20',
    source: LogSource.JENKINS,
    timestamp: new Date(Date.now() - 1500000),
    message: 'Timeout after 30 minutes',
    rawData: 'Timeout after 30 minutes',
    category: LogCategory.PERFORMANCE,
    severity: LogSeverity.ERROR,
    errorType: 'BuildTimeout',
    suggestedFix: 'Increase build timeout in job configuration or optimize build process',
    tags: ['jenkins', 'timeout', 'build'],
  },
];

export async function POST() {
  try {
    // Clear existing cache
    logsStore.clear();

    // Add demo logs
    logsStore.add(demoLogs);

    return NextResponse.json({
      message: 'Demo data loaded successfully',
      logsLoaded: demoLogs.length,
    });
  } catch (error) {
    console.error('Error loading demo data:', error);
    return NextResponse.json(
      { error: 'Failed to load demo data' },
      { status: 500 }
    );
  }
}
